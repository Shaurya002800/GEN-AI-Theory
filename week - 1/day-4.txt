# Week 4 - Day 4: Agentic AI Frameworks

---

## Model Content Protocol (MCP)

* **Defines:** How **LLMs** (Large Language Models) communicate with external systems.
* **Enables:** **Interoperability** between frameworks and tools.
* **Key Features:** Secure and standardized.
* **Best For:** Building tools using agents that need **structured, secure connections**.

---

## Tools and Autonomy

* **"Tools"** give LLMs autonomy.
* **Purpose:** Give an LLM the power to carry out actions like query a database or message other LLMs.
* **Process Diagram:**
    1.  **LLM** sends a **Prompt** to **Code**.
    2.  **Code** sends a **Response** back to the **LLM**.
    3.  **Code** can then **Execute** an action.

---

## Frameworks for Agentic AI

### LangGraph

* **Builds on:** LangChain.
* **Key Features:**
    * Supports stateful agents (keeps memory between steps).
    * Provides visualization of agent flows as graphs.
* **Best For:** Complex, **multi-step reasoning**, collaborative agents, or **workflow orchestration**.

### AutoGen

* **Simplifies:** Agent collaboration (e.g., a "coder" agent and a "critic" agent).
* **Handles:** Message passing and orchestration automatically.
* **Supports:** Human-in-the-loop setups.
* **Best For:** **Autonomous coding agents**, research assistants, or conversational multi-agent systems.

### OpenAI Agents SDK

* **Key Features:**
    * Deep integration with **GPT models**.
    * Supports tools, APIs, and data access.
    * Built-in memory and file handling.
* **Best For:** Developers already using **OpenAI's ecosystem** who want **plug-and-play** agent features.

### Crew AI

* **Mechanism:** You define multiple specialized agents with **"roles"**.
* **Capabilities:** Agents can communicate, reason, and divide tasks.
* **Built with:** Simplicity and **modularity** in mind.
* **Best For:** Project management, **workflow automation**, or collaborative AI tasks.

### No Framework

* **Benefit:** **Maximum flexibility**.
* **Process:** You design logic, state management, and custom implementation.
* **Best For:** Developers who want **full control** and **custom implementations**.



## Tools and LLM Autonomy

* **"Tools"** give LLMs **autonomy**.
* **Function:** Give an LLM the power to carry out actions like query a database or message other LLMs.
* **Process Diagram:**
    1.  **LLM** sends a **prompt** to **Code**.
    2.  **Code** sends a **response** back to the **LLM**.
    3.  **Code** can then **execute** an action.